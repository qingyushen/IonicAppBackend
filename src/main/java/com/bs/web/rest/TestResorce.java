package com.bs.web.rest;

//import com.bs.mapper.GroupMapper;
import com.bs.JWT.JWTProvider;
import com.bs.doc.generation.CreateDocument;
import com.bs.holder.GroupAuth;
import com.bs.holder.memberDetailVM;
import com.bs.mapper.GroupMapper;
import com.bs.mapper.TodoTaskMapper;
import com.bs.mapper.UserMapper;
import com.bs.model.Group;
import com.bs.model.User;
import com.bs.model.todoTask;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;


import javax.servlet.http.HttpServletRequest;
import javax.transaction.Transactional;
import java.sql.Timestamp;
import java.util.*;
//import java.util.*;


@RestController
@Transactional
@RequestMapping("/api")
public class TestResorce {

  @Autowired // This means to get the bean called userRepository
      // Which is auto-generated by Spring, we will use it to handle the data
  UserMapper userMapper;
  @Autowired
  TodoTaskMapper todoTaskMapper;
  @Autowired
  GroupMapper groupMapper;

  @Autowired
  JWTProvider jwtProvider;

  private com.bs.security.DESedeOperator des;

  /**
   * Use the JSON stored in jwt token to find info about current user
   * @param request - the header
   * @return - The User who owns the token
   */
  private User getUserDetails(HttpServletRequest request) {
    String token = request.getHeader("Authorization");
    String email = jwtProvider.parseEmail(token);
    return userMapper.findUserByEmail(email);
  }

  @GetMapping(value="/getUserById/{id}")
  public User getUserByEmail(@PathVariable("id")Integer id) {
    return userMapper.findUserById(id);
  }

  /**
   * When a task is modified or added, check if it is completed. If yes, then modify the
   * analysis columns of user to which task was assigned
   * @param u - The user to which task was assigned
   * @param newTask - The task being checked to see if it is newly completed
   */
  private void checkTaskCompleted(User u, todoTask newTask) {
    todoTask old = todoTaskMapper.findById(newTask.getId());
    if ((old == null || old.getDone() != 1) && newTask.getDone() == 1) {
      u.setTasksCompleted(u.getTasksCompleted()+1);
      long timeToComplete = (newTask.getCompletedAt().getTime() - newTask.getCreatedAt().getTime()) / 60000;
      u.setCompleteTime(u.getCompleteTime()+ timeToComplete);
      u.setAvgTime(u.getCompleteTime()/u.getTasksCompleted());
    }
    userMapper.save(u);
  }

  @GetMapping(value = "/getTasks") // Map ONLY GET Requests
  public List<todoTask> getTasks(HttpServletRequest request) {
    User u = getUserDetails(request);
   // System.out.println("id and team id is: " + u.getId() + u.getTeam());
    //return todoTaskMapper.getAllByGroupNameAndFollowedAndAssignedToContaining( u.getTeam(), 0, u);
    //return todoTaskMapper.getAllByAssignedToAndAndGroupNameAndFollowed(u.getId(), u.getTeam(),0);
    return todoTaskMapper.getAllByAssignedToIDAndGroupNameAndFollowedByNotContaining(u.getId(), u.getTeam(), u);
  }

  /**
   * Get the status updates ie. most recently updated task
   * @param request
   * @return
   */
  @GetMapping(value = "/getTeamUpdates") // Map ONLY GET Requests
  public List<todoTask> getTeamUpdates(HttpServletRequest request) {
    User u = getUserDetails(request);
    return todoTaskMapper.findTop30ByGroupNameAndVisibleOrderByUpdatedAtDesc(u.getTeam(), 1);
  }

  @GetMapping(value = "/getFollowedTasks")
  public List<todoTask> getFollowedTasks(HttpServletRequest request) {
    User u = getUserDetails(request);
    return todoTaskMapper.getAllByGroupNameAndFollowedByContaining(u.getTeam(), u );
  }

  /**
   * Add a group to current user
   * @param request - Obtain current user through jwt
   * @param auth
   * @return - null if group name already registered and incorrect password
   *         - Otherwise returns the group object that user will join
   */
  @PostMapping(value = "/addGroup")
  public HashMap<String, String> addGroup(HttpServletRequest request, @RequestBody GroupAuth auth) {
    HashMap<String, String> out = new HashMap<>();
    User current = getUserDetails(request);
    Group groupToJoin = groupMapper.findByName(auth.getGroupName());
    // Check if group to join already exists, if not then create a new group
    if (groupToJoin == null) {
      groupToJoin = new Group(auth.getGroupName(), des.encrypt(auth.getGroupPassword()));
      groupToJoin = groupMapper.save(groupToJoin);
      current.getGroupsAdminOf().add(groupToJoin);
      out.put("privilege", "admin");
      out.put("result", "newGroup");
    }
    else if (!groupToJoin.getPassword().equals(des.encrypt(auth.getGroupPassword()))) {
      out.put("result", "incorrectPassword");
    }
    // joining group
    else {
      out.put("result", "joinGroup");
      out.put("privilege", "member");
    }
    (current.getGroups()).add(groupToJoin);
    userMapper.save(current);
    return out;
  }

  @GetMapping(value = "/leaveGroup/{name}")
  public HashMap<String, Integer> leaveGroup(HttpServletRequest request,
                                          @PathVariable("name") String name) {
    User current = getUserDetails(request);
    Group groupToLeave = groupMapper.findByName(name);
    HashMap<String, Integer> out = new HashMap<String, Integer>();
    // Check if group to join already exists, if not then create a new group
    // Add the group to user, Add user to group, save both
    if (groupToLeave == null) {
      out.put("success", 0);
      return out;
    }
    if (current.getGroups().remove(groupToLeave)) {
      userMapper.save(current);
      //todoTaskMapper.deleteAllByAssignedToIDAndGroupName(current.getId(), name);
      todoTaskMapper.deleteAllByAssignedToIDAndGroupName(current.getId(), current.getTeam());
      out.put("success", 1);
      return out;
    }
    return null;
  }

  @GetMapping(value = "/getGroups")
  public Set<Group> getGroups(HttpServletRequest request) {
    User current = getUserDetails(request);
    return current.getGroups();
  }

  @GetMapping(value = "/switchGroup/{name}")
  public HashMap<String, String> switchGroup(HttpServletRequest request,
                                             @PathVariable("name") String name) {
    User current = getUserDetails(request);
    Group groupToJoin = groupMapper.findByName(name);
    if (groupToJoin == null) {
      return null;
    }
    // Don't switch to a group that doesn't contain the user
    else if (!current.getGroups().contains(groupToJoin)) {
      return null;
    }
    current.setTeam(groupToJoin.getName());
    userMapper.save(current);
    HashMap<String, String> output = new HashMap<>();
    String tkn = jwtProvider.createToken(current, true);
    output.put("token", tkn);
    String privilege;
    if (groupToJoin.getAdmins().contains(current)) {
      privilege = "admin";
    } else {
      privilege = "member";
    }
    output.put("privilege", privilege);
    return output;
  }

  /**
   * Add a new user to the current group of current user
   * @param request - Request to obtain jwt header
   * @param json - Contains "email" key of new member to add to group
   * @return - The User object who joined group of current user
   *         - null if invalid userToJoin or currentUser is not admin of group
   */
  @PostMapping(value = "/addMemberToGroup")
  public User addMemberToGroup(HttpServletRequest request, @RequestBody Map<String, String> json) {
    System.out.println(json.get("email"));
    User current = getUserDetails(request);
    User userToJoin = userMapper.findUserByEmail(json.get("email"));
    if (userToJoin == null) {
      return null;
    }
    Group groupToJoin = groupMapper.findByName(current.getTeam());
    //if (groupToJoin.getAdmins().contains(current)) {
    userToJoin.getGroups().add(groupToJoin);
    return userMapper.save(userToJoin);
    //}
    //return null;
  }

  /**
   * Get the todoTasks of a specified user using their unique id
   * @return
   */
  @GetMapping(value = "/getUserTasks/{id}")
  public List<memberDetailVM> getUserTasks(HttpServletRequest request, @PathVariable("id") Integer id) {
    User current = getUserDetails(request);
    if (userMapper.findUserById(id) == null) {
      return null;
    }
    User user = userMapper.findUserById(id);
    List<todoTask> out = todoTaskMapper.getAllByAssignedToIDAndGroupNameAndVisible(user.getId(), current.getTeam(),1);
    List<memberDetailVM> output = new ArrayList<>();
    for (int i = 0; i < out.size(); i++) {
      memberDetailVM tmp = new memberDetailVM(out.get(i));
      output.add(tmp);
    }
    return output;
   // return todoTaskMapper.getAllByGroupNameAndAssignedToContaining(current.getTeam(), current);
  }

  @PostMapping(value = "/changeCoverImg")
  public Map<String, String> changeCoverImg(HttpServletRequest request, @RequestBody Map<String, String> json) {
    User current = jwtProvider.getUserDetails(request);
    current.setCoverImgUrl(json.get("url"));
    userMapper.save(current);
    Map<String, String> out = new HashMap<String, String>();
    out.put("result", "success");
    return out;
  }

  @PostMapping(value = "/changeProfileImg")
  public Map<String, String> changeProfileImg(HttpServletRequest request, @RequestBody Map<String, String> json) {
    User current = jwtProvider.getUserDetails(request);
    current.setProfileImgUrl(json.get("url"));
    userMapper.save(current);
    Map<String, String> out = new HashMap<String, String>();
    out.put("result", "success");
    return out;
  }

  @GetMapping(value = "/getUsers")
  public List<User> getUsers(HttpServletRequest request) {
    User current = getUserDetails(request);
    Group curGroup = groupMapper.findByName(current.getTeam());
    return userMapper.getAllByGroupsContains(curGroup);
  }

  @PostMapping("addFollowing/{taskID}")
  public memberDetailVM addFollowing(@RequestBody int[] userIDs, @PathVariable("taskID") Integer taskID) {
    todoTask curTask = todoTaskMapper.findById(taskID);
    for (int i = 0; i < userIDs.length; i ++) {
      User tmp = userMapper.findUserById(userIDs[i]);
      curTask.getFollowedBy().add(tmp);
    }
    todoTaskMapper.save(curTask);
    memberDetailVM out = new memberDetailVM(curTask);
    return out;
  }

  @PostMapping("deleteFollowing/{taskID}")
  public memberDetailVM deleteFollowing(@RequestBody int[] userIDs, @PathVariable("taskID") Integer taskID) {
    todoTask curTask = todoTaskMapper.findById(taskID);
    for (int i = 0; i < userIDs.length; i ++) {
      User tmp = userMapper.findUserById(userIDs[i]);
      curTask.getFollowedBy().remove(tmp);
    }
    todoTaskMapper.save(curTask);
    memberDetailVM out = new memberDetailVM(curTask);
    return out;
  }

  @PostMapping("/addTask") // Map only POST requests
  public memberDetailVM addTask(@RequestBody todoTask task) {
//    Date date = java.util.Calendar.getInstance().getTime();
//    task.setDateTime(date);
//    System.out.println(task);
    User u = userMapper.findUserById(task.getAssignedToID());
    // Add newTask to user's followedBy array if conditional filled
//    if (task.getFollowedBy().contains(u)) {
//      u.getTasksFollowed().add(task);
//      userMapper.save(u);
//    }
    checkTaskCompleted(u, task);
//    todoTask dbTask = todoTaskMapper.findById(task.getId());
//    dbTask.getFollowedBy().add(u);
    task.setUpdatedAt(new Timestamp(new Date().getTime()));
    Set<User> usersFollowing = new HashSet<>(task.getFollowedBy());
    if (todoTaskMapper.findById(task.getId()) != null) {
      todoTask dbTask = todoTaskMapper.findById(task.getId());
      task.setFollowedBy(dbTask.getFollowedBy());
    } else {
      task.getFollowedBy().clear();
    }
    for (User userFollow: usersFollowing) {
      User dbUser = userMapper.findUserById(userFollow.getId());
      task.getFollowedBy().add(dbUser);
    }
    todoTask savedTask = todoTaskMapper.save(task);
    memberDetailVM out = new memberDetailVM(savedTask);
    return out;
  }

  @PostMapping("/addTasks")
  public todoTask[] addTasks(@RequestBody todoTask[] tasks) {
    for (int i = 0; i < tasks.length; i++) {
      addTask(tasks[i]);
    }
    return tasks;
  }

//  @PostMapping("/updateTask")
//  public todoTask updateTask(@RequestBody todoTask t ) {
//    todoTask currentTask = todoTaskMapper.findById(t.getId());
//    if (currentTask == null) {
//      return null;
//    }
//    todoTaskMapper.save(t);
//    return currentTask;
//  }

  @GetMapping("/deleteTask/{id}")
  public todoTask deleteTask(@PathVariable("id") String id) {
    todoTask currentTask = todoTaskMapper.findById(Integer.parseInt(id));
//    if (currentTask == null) {
//      return "Unable to update. todo task with id " + String.valueOf(id) + " not found.";
//    }
    // If the task was done, then decrement the tasksCompleted of user who completed task
    if (currentTask.getDone() == 1) {
      User u = userMapper.findUserById(currentTask.getAssignedToID());
      u.setTasksCompleted(u.getTasksCompleted() - 1);
      long completeTime = (currentTask.getCompletedAt().getTime() - currentTask.getCreatedAt().getTime()) / 60000; // minutes
      u.setCompleteTime(u.getCompleteTime() - completeTime);
      if (u.getTasksCompleted() != 0) {
        u.setAvgTime(u.getCompleteTime() / u.getTasksCompleted());
      } else {
        u.setAvgTime((long) 0);
      }
      userMapper.save(u);
    }
//    todoTask curTask = todoTaskMapper.findById(Integer.parseInt(id));
//      for (User user: currentTask.getFollowedBy()) {
//      user.getTasksFollowed().remove(currentTask);
//     // userMapper.save(user);
//    }
    currentTask.getFollowedBy().clear();
    todoTaskMapper.removeById(Integer.parseInt(id));
    return currentTask;
  }

  @GetMapping(value="/makeUserAdmin/{id}")
  public Map<String, String> makeUserAdmin(HttpServletRequest request,
                                           @PathVariable("id") Integer id) {
    Map<String, String> out = new HashMap<>();
    User loggedInUser = jwtProvider.getUserDetails(request);
    Group curGroup = jwtProvider.getGroupDetails(request);
    if (!loggedInUser.getGroupsAdminOf().contains(curGroup)) {
      out.put("result", "non-admin access");
    } else {
      User futureAdmin = userMapper.findUserById(id);
      futureAdmin.getGroupsAdminOf().add(curGroup);
      userMapper.save(futureAdmin);
      out.put("result", "success");
    }
    return out;
  }

  @GetMapping(value="/makeUserMember/{id}")
  public Map<String, String> makeUserMember(HttpServletRequest request,
                                           @PathVariable("id") Integer id) {
    Map<String, String> out = new HashMap<>();
    User loggedInUser = jwtProvider.getUserDetails(request);
    Group curGroup = jwtProvider.getGroupDetails(request);
    if (!loggedInUser.getGroupsAdminOf().contains(curGroup)) {
      out.put("result", "non-admin access");
    } else if (curGroup.getAdmins().size() == 1) {
      out.put("result", "only 1 admin in group");
    }
    else {
      User futureMember = userMapper.findUserById(id);
      futureMember.getGroupsAdminOf().remove(curGroup);
      userMapper.save(futureMember);
      out.put("result", "success");
    }
    return out;
  }

  @GetMapping(value="/checkUserAdmin/{id}")
  public Map<String, String> checkUserAdmin(HttpServletRequest request,
                                           @PathVariable("id") Integer id) {
    Map<String, String> out = new HashMap<>();
    User loggedInUser = jwtProvider.getUserDetails(request);
    Group curGroup = jwtProvider.getGroupDetails(request);
    if (!loggedInUser.getGroupsAdminOf().contains(curGroup)) {
      out.put("result", "non-admin access");
    } else {
      User futureAdmin = userMapper.findUserById(id);
      if (futureAdmin.getGroupsAdminOf().contains(curGroup)) {
        out.put("result", "admin");
      }
      else {
        out.put("result", "member");
      }
    }
    return out;
  }

}
